import dependencies.Dep
import dependencies.Packages
import dependencies.Versions

apply plugin: 'com.android.application'

android {
logger.quiet("Build variable Major:$System.env.Major")
/* Set the build version first */
	Properties properties = new Properties()
	def propertiesFile = project.rootProject.file('local.properties')
	if (propertiesFile.exists()) {
		 properties.load(propertiesFile.newDataInputStream())
	}

	def localbuildMajor = properties.getProperty('Major') 
	def systemEnvbuildMajor = System.getenv('Major')
	ext."build.Major" = localbuildMajor != null ? localbuildMajor : systemEnvbuildMajor

	def localbuildMinor = properties.getProperty('Minor')
	def systemEnvbuildMinor = System.getenv('Minor')
	ext."build.Minor" = localbuildMinor != null ? localbuildMinor : systemEnvbuildMinor

	def localbuildRevision = properties.getProperty('Revision') 
	def systemEnvbuildRevision = System.getenv('Revision')
	ext."build.Revision" = localbuildRevision != null ? localbuildRevision : systemEnvbuildRevision

	def localbuildOffset = properties.getProperty('Offset') 
	def systemEnvbuildOffset = System.getenv('Offset')
	ext."build.Offset" = localbuildOffset != null ? localbuildOffset : systemEnvbuildOffset
        def Versions=new Versions(ext."build.Major",ext."build.Minor",ext."build.Revision",ext."build.Offset")
	logger.quiet("Configured versions Name:$Versions.androidVersionName Code:$Versions.androidVersionCode") 
  
    compileSdkVersion Versions.androidCompileSdkVersion

    defaultConfig {
        applicationId Packages.name
        minSdkVersion Versions.androidMinSdkVersion
        targetSdkVersion 29

        versionCode Versions.androidVersionCode
        versionName Versions.androidVersionName
	logger.quiet("Using versions for building name:$versionName code:$versionCode") 
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true

        renderscriptTargetApi 17
        renderscriptSupportModeEnabled true

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"en_US\",\"de_DE\",\"ru_RU\",\"pl_PL\"}"
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$versionCode"
        setProperty("archivesBaseName", applicationId +  "-$versionName" + "($versionCode)")
    }

    // Load keystore properties if file exists.
    def keystore_properties = file('../keystore.properties')
    if (keystore_properties.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(keystore_properties))
        props.each { prop ->
            project.ext.set(prop.key, prop.value)
        }
    }

    // Read passwords from Gradle properties and if not found,
    // then from environment variables.
    def keystore_password = project.hasProperty('KEYSTORE_PASSWORD') ? KEYSTORE_PASSWORD : System.getenv("KEYSTORE_PASSWORD")
    def key_alias = project.hasProperty('KEY_ALIAS') ? KEY_ALIAS : System.getenv("KEY_ALIAS")
    def key_password = project.hasProperty('KEY_PASSWORD') ? KEY_PASSWORD : System.getenv("KEY_PASSWORD")

    signingConfigs {
        release {
            storeFile file('../tools/DriverApp.jks')
            storePassword keystore_password
            keyAlias key_alias
            keyPassword key_password
        }
    }

    buildTypes {
        release {
            lintOptions {
                checkReleaseBuilds false
                // Or, if you prefer, you can continue to check for errors in release builds,
                // but continue the build even when errors are found:
                abortOnError false
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Set signing config if keystore variables are set.
            if (keystore_password && key_alias && key_password) {
                signingConfig signingConfigs.release
            } else {
                logger.error("You need to define KEYSTORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD to enable debug and release signing!")
            }
        }
	archives {
            // Set signing config if keystore variables are set.
            if (keystore_password && key_alias && key_password) {
                signingConfig signingConfigs.release
            } else {
                logger.error("You need to define KEYSTORE_PASSWORD, KEY_ALIAS and KEY_PASSWORD to enable debug and release signing!")
            }
	}
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':core')
    implementation project(':flag-kit')

    // Logify
    implementation 'com.devexpress.logify:logify-alert-android:1.0.2'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.google.android.material:material:1.3.0-alpha01"
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    // Room
    implementation "androidx.room:room-runtime:2.2.5"
    implementation 'androidx.room:room-rxjava2:2.2.5'
    annotationProcessor "androidx.room:room-compiler:2.2.5"

    implementation 'com.google.firebase:firebase-analytics:17.4.4'
    implementation 'com.google.firebase:firebase-messaging:20.2.3'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'

    // WorkManager:
    implementation 'androidx.work:work-runtime:2.3.4'

    // Dagger2
    implementation Dep.Dagger.core
    annotationProcessor Dep.Dagger.compiler
    implementation Dep.Dagger.androidSupport
    annotationProcessor Dep.Dagger.androidProcessor

    implementation "com.squareup.retrofit2:retrofit:2.6.2"
    implementation "com.squareup.retrofit2:converter-gson:2.6.2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.6.2"

    // OkHttp:
    implementation 'com.squareup.okhttp3:okhttp:4.2.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'

    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.12"

    implementation 'com.google.code.gson:gson:2.8.6'

    // Event Bus
    implementation 'org.greenrobot:eventbus:3.1.1'


    implementation 'com.android.volley:volley:1.1.1'
    implementation 'de.hdodenhof:circleimageview:3.0.2'
    implementation 'com.github.zurche:plain-pie:v0.2.9'
    implementation 'com.github.linger1216:labelview:v1.1.2'
    implementation 'com.github.shivam301296:Android-CustomToast:1.0.1'
    implementation 'com.karumi:dexter:6.0.0'
    implementation 'com.shuhart.stepview:stepview:1.5.0'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.annimon:stream:1.2.1'
    implementation 'org.whispersystems:signal-service-android:2.13.9'
    implementation "com.github.skydoves:powermenu:2.1.2"
    api 'com.otaliastudios:cameraview:2.4.0'
    //implementation 'com.github.tizisdeepan:gallerypicker:1.0.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.kongzue.dialog_v3x:dialog:3.1.8'
    implementation 'com.ramijemli.percentagechartview:percentagechartview:0.3.0'
    implementation 'com.pnikosis:materialish-progress:1.7'
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    //implementation 'com.github.iamutkarshtiwari:Ananas:1.2.3'
    //implementation 'me.jfenn.ColorPickerDialog:base:0.2.1'
    implementation 'com.github.chivorns.androidx:smartmaterialspinner:1.2.1'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['log', '-1', '--pretty=format:%ct']
            standardOutput = os
        }

        return os.toString() + "000"
    }
}

apply plugin: 'com.google.gms.google-services'
apply from: "../artifacts.gradle"